import express from "express";
import mongoose from "mongoose";
import bodyParser from "body-parser";
import cors from "cors";
import dotenv from "dotenv";

dotenv.config();
const PORT = process.env.PORT || 4501;

const app = express();

//Fixing Absence of Anti-CSRF Tokens

import csurf from "csurf";
import cookieParser from "cookie-parser";

// Add middleware to parse cookies
app.use(cookieParser());

// Enable CSRF protection middleware
// app.use(
//   csurf({
//     cookie: {
//       httpOnly: true,
//       secure: true,
//     },
//   })
// );

// Set up a route to expose the CSRF token to views
// app.get("/csrf/token", (req, res) => {
//   const token = req.csrfToken();
//   res.json({ csrfToken: token });
//     console.log(token," fromBE");
// });

// // // Add middleware to expose the CSRF token to views
// app.use((req, res, next) => {
//   var token = req.csrfToken();
//   console.log(token);
//   res.locals.csrfToken = token;
//   next();
// });

import helmet from "helmet";

// Fixing X-Content-Type-Options Header Absence
app.use(helmet.noSniff());

//Fixing CSP: Wildcard Directive and Content Security Policy (CSP) Header Not Set
app.use(
  helmet.contentSecurityPolicy({
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'", "trusted-scripts.com"],
    },
    reportOnly: false,
  })
);

//Fixing Cross-Domain Misconfiguration
const allowedOrigins = ["http://localhost:3000"];

app.use(
  cors({
    origin: function (origin, callback) {
      if (!origin || allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        callback(new Error("Not allowed by CORS"));
      }
    },
  })
);

//Fixing Missing Anti-clickjacking Header
app.use(helmet.frameguard({ action: "deny" }));

//Fixing Server Leaks Information via "X-Powered-By" HTTP Response Header Fields
app.use((req, res, next) => {
  res.header("X-Powered-By", "Custom Server");
  next();
});

// Fixing Server Leaks Information via "X-Powered-By" HTTP Response Header Field
app.use(helmet.hidePoweredBy());

app.use(bodyParser.json());

//Importing Routes
import landuser from "./routes/LandUserRoute.js";
import authRoutes from "./routes/AuthRoute.js";
import googleAuthRoutes from "./routes/GoogleAuthRoute.js";
import rentalRoutes from "./routes/RentalRoute.js";
import sales from "./routes/sales.js";

//Using Routes
app.use("/user", landuser);
app.use("/auth", authRoutes);
app.use("/googleAuth", googleAuthRoutes);
app.use("/rental", rentalRoutes);
app.use("/sale", sales);

//Establishing connection between server and DB
const URL = process.env.MONGODB_URL;

mongoose.connect(URL, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const connection = mongoose.connection;
connection.once("open", () => {
  console.log("MongoDB Connection is Done");
});
app.listen(PORT, () => {
  console.log(`Server is Running on port: ${PORT}`);
});
