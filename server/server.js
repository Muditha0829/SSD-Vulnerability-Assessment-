import express from "express";
import mongoose from "mongoose";
import bodyParser from "body-parser";
import cors from "cors";
import dotenv from "dotenv";

dotenv.config();
const PORT = process.env.PORT || 4501;

const app = express();

//Fixing CSP: Wildcard Directive
import helmet from "helmet";
app.use(
    helmet.contentSecurityPolicy({
      directives: {
        defaultSrc: ["'self'"],
        scriptSrc: ["'self'","'unsafe-inline'" ,'trusted-scripts.com'],
      },
      reportOnly:false
    })
  );
  

//Fixing Missing Anti-clickjacking Header
app.use(helmet.frameguard({ action: 'deny' }));


//Fixing Cross-Domain Misconfiguration
const allowedOrigins = ['http://localhost:3000'];

app.use(
  cors({
    origin: function (origin, callback) {
      if (!origin || allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        callback(new Error('Not allowed by CORS'));
      }
    },
  })
);

//Fixing Server Leaks Information via "X-Powered-By" HTTP Response Header Fields
app.use((req, res, next) => {
    res.header('X-Powered-By', 'Custom Server');
    next();
  });


app.use(bodyParser.json());

//Importing Routes
import landuser from "./routes/LandUserRoute.js";
import authRoutes from "./routes/AuthRoute.js";
import rentalRoutes from "./routes/RentalRoute.js";
import sales from "./routes/sales.js";

//Using Routes
app.use("/user",landuser);
app.use("/auth", authRoutes);
app.use("/rental", rentalRoutes);
app.use("/sale",sales);

//Establishing connection between server and DB
const URL = process.env.MONGODB_URL;

mongoose.connect(URL,{
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

const connection = mongoose.connection;
connection.once("open", ()=>{
    console.log("MongoDB Connection is Done");
})
app.listen(PORT, ()=>{
    console.log(`Server is Running on port: ${PORT}`);
})


